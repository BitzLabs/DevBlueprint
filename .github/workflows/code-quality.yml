# コード品質チェックワークフロー
# プッシュやプルリクエスト時に自動的にコード品質をチェックします
name: Code Quality Check

on:
  push:
    branches: [ main, develop ]  # mainとdevelopブランチへのプッシュ時に実行
  pull_request:
    branches: [ main, develop ]  # mainとdevelopブランチへのプルリクエスト時に実行

jobs:
  # フォーマットとリント検証ジョブ
  # Prettier、Markdown、YAML、JSONのフォーマットと品質をチェック
  format-and-lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js  # Node.js環境をセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'  # npmキャッシュを有効化してビルド高速化

    - name: Install dependencies  # 依存関係をインストール
      run: npm ci

    - name: Check Prettier formatting  # Prettierフォーマットチェック
      run: npm run format:check

    - name: Check Markdown lint  # Markdownリントチェック
      run: npm run lint:md

    - name: Check YAML lint  # YAMLリントチェック
      run: npm run lint:yaml

    - name: Check JSON formatting  # JSONフォーマットチェック
      run: npm run lint:json

  # C#コード品質チェックジョブ
  # .csファイルが変更された場合のみ実行
  csharp-quality:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.cs') || contains(github.event.head_commit.added, '.cs')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET  # .NET環境をセットアップ
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies  # NuGetパッケージを復元
      run: dotnet restore

    - name: Build  # プロジェクトをビルド
      run: dotnet build --no-restore --configuration Release

    - name: Check format  # .NETフォーマッターでコードスタイルをチェック
      run: dotnet format --verify-no-changes --verbosity normal

    - name: Run tests  # 単体テストを実行
      run: dotnet test --no-build --configuration Release

  # C/C++コード品質チェックジョブ
  # C/C++ファイルが変更された場合のみ実行
  cpp-quality:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.cpp') || contains(github.event.head_commit.modified, '.c') || contains(github.event.head_commit.modified, '.h') || contains(github.event.head_commit.modified, '.hpp')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install tools  # C/C++静的解析ツールをインストール
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy cppcheck

    - name: Check clang-format  # clang-formatでコードフォーマットをチェック
      run: |
        find . -name "*.cpp" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

    - name: Run clang-tidy  # clang-tidyで静的解析を実行
      run: |
        find . -name "*.cpp" -o -name "*.c" | xargs clang-tidy

    - name: Run cppcheck  # cppcheckで静的解析を実行
      run: cppcheck --enable=all --error-exitcode=1 .

  # Pythonコード品質チェックジョブ
  # .pyファイルが変更された場合のみ実行
  python-quality:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.py') || contains(github.event.head_commit.added, '.py')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python  # Python環境をセットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Ruff  # Ruff（高速なPythonリンター）をインストール
      run: pip install ruff

    - name: Check formatting  # Ruffでコードフォーマットをチェック
      run: ruff format --check .

    - name: Run linter  # Ruffでリント検証を実行
      run: ruff check .
