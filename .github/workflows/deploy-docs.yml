# ワークフローの名前
name: DocsをGitHub Pagesへデプロイ

# ワークフローが実行されるトリガー
on:
  push:
    branches:
      - main  # mainブランチへのpushで実行
  pull_request:
    branches:
      - main  # mainブランチへのプルリクエスト時にも実行
  workflow_dispatch:  # 手動実行も可能

# パーミッションの設定 (最小権限でOKになる)
permissions:
  contents: read  # ソースコードの読み取り権限だけでOK
  pages: write    # GitHub Pagesへの書き込み権限
  id-token: write # デプロイ認証用のIDトークン書き込み権限

# ジョブ
jobs:
  # ビルドとデプロイを行う単一のジョブ
  deploy:
    # デプロイ環境の設定
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Python環境をセットアップ
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      # 3. MkDocsとMaterial for MkDocsテーマをインストール
      - name: Install dependencies
        run: pip install mkdocs-material

      # 4. MkDocsで静的サイトをビルド
      #    出力先はデフォルトで 'site' フォルダ
      - name: Build with MkDocs
        run: mkdocs build

      # 5. ビルドしたサイトの成果物をアーティファクトとしてアップロード
      #    このアーティファクトを、後続のデプロイステップが利用する
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site' # MkDocsのビルド出力先

      # 6. アップロードしたアーティファクトをGitHub Pagesにデプロイ
      #    ★このステップは、mainブランチへのプッシュ時にのみ実行される
      - name: Deploy to GitHub Pages
        id: deployment
        # if条件は不要。deploy-pagesアクションが自動でトリガーを判断してくれる
        uses: actions/deploy-pages@v4