# ワークフローの名前。GitHubのActionsタブで表示される
name: Build and Deploy Docs

# ワークフローが実行されるトリガーの定義
on:
  # 1. mainブランチにプッシュ（マージ）された時に実行
  push:
    branches:
      - main
  # 2. mainブランチに対するプルリクエストが作成・更新された時にも実行
  pull_request:
    branches:
      - main
  # 3. GitHubのActionsタブから手動で実行することも可能にする
  workflow_dispatch:

# ジョブの定義
jobs:
  # ジョブ1: サイトのビルドとチェックを行う
  # このジョブはPR時にもmainへのプッシュ時にも実行される
  build:
    name: Build Docs Site # Actionsタブで表示されるジョブ名
    runs-on: ubuntu-latest # 実行環境として最新のUbuntuを使用
    steps:
      # ステップ1: リポジトリのコードを仮想環境にチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # ステップ2: Python 3.x 環境をセットアップ
      # MkDocsはPython製のため必須
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      # ステップ3: 必要なライブラリ（MkDocsとMaterialテーマ）をインストール
      - name: Install dependencies
        run: pip install mkdocs-material mkdocs-exclude

      # ステップ4: 不要ファイルの削除
      - name: Clean up unnecessary files
        run: |
          rm -rf .git .github .gemini
          rm -rf Docs/*.csproj

      # ---デバッグ用ステップ
      #- name: List files before build (for debugging)
      #  run: ls -laR

      # ステップ5: MkDocsでサイトをビルドする
      - name: Build with MkDocs
        run: mkdocs build --verbose

      # ---デバッグ用ステップ 
      - name: List site directory contents (for debugging)
        run: |
          ls -laR site
          find site -type f | xargs file
          find site -ls
         
      # ステップ6: ビルドしたサイトの成果物（'site'フォルダ）をアーティファクトとしてアップロード
      # これにより、後続の'deploy'ジョブがこの成果物を利用できるようになる
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # deployジョブが探すデフォルト名'github-pages'に合わせる
          name: github-pages 
          path: './site'

  # ジョブ2: GitHub Pagesへのデプロイを行う
  deploy:
    name: Deploy to GitHub Pages # Actionsタブで表示されるジョブ名
    # 'build'ジョブが成功した場合にのみ、このジョブが開始される
    needs: build
    
    # このジョブは、mainブランチへのプッシュ時にのみ実行される
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # デプロイに必要なパーミッションを設定
    permissions:
      pages: write      # GitHub Pagesへの書き込み権限
      id-token: write # デプロイ認証用のIDトークン書き込み権限
      
    # デプロイ環境の指定
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 実行結果にサイトURLを表示させる
    runs-on: ubuntu-latest
    
    steps:
      # ステップ1: 'build'ジョブがアップロードしたアーティファクトをダウンロード
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      # ステップ2: ダウンロードしたアーティファクトをGitHub Pagesにデプロイ
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
